<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>taro-dva整合</title>
      <link href="/2018/08-31-TaroDva/"/>
      <url>/2018/08-31-TaroDva/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>小程序的开发体验和现在的前端开发完全是两个时代的事。</p><p>在之前的小程序开发中，我曾尝试使用 webpack 打包js 的方式，整合 dvajs 到小程序内，进行状态管理和异步逻辑的编写。然后把状态订阅到小程序的Page.data 上的方式进行开发，实现逻辑部分兼容微信小程序和支付宝小程序，然后体验并不好！</p><p>直到我遇到 taro, taro 是一个多端统一开发框架，支持用 React 的开发方式编写一次代码，生成能运行在微信小程序、H5、React Native 等的应用。</p><blockquote><p>连接地址:<a href="https://taro.aotu.io" target="_blank" rel="noopener">https://taro.aotu.io</a></p></blockquote><p>由于我们的前段项目基本上都使用 dvajs<br>来整合 redux、redux-saga 进行项目开发。<br>因此需要实现dvajs和 redux 的整合</p><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><p>在使用taro 前，我建议一定要看完<a href="https://nervjs.github.io/taro/" target="_blank" rel="noopener">官方文档</a>,并大致浏览<a href="https://github.com/NervJS/taro/issues" target="_blank" rel="noopener">issues</a></p><p>taro这种框架不能完美的实现react 全部特性，也不可能完全完美兼容前端的各种库，因此使用是我建议避免使用太多特性，以及严格按照官方文档来办，尽量绕过各种坑，而不是去填平他</p><p>对于react的各种ui库，建议谨慎引入，首先是不兼容，其次是在小程序里面，我一直建议尽量使用腾讯提供的组件，来达到更好的体验和性能以及包大小。</p><p>必要时不如劝产品经理和美术人员修改直接的方案反而更合适</p><p>必要时可以使用taro-ui这种针对性的ui库。</p><h2 id="整合-taro和dvajs"><a href="#整合-taro和dvajs" class="headerlink" title="整合 taro和dvajs"></a>整合 taro和dvajs</h2><p>整合dvajs，首先需要解决redux 依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add redux @tarojs/redux @tarojs/redux-h5 redux-thunk redux-logger</span><br><span class="line"># 或者使用 npm</span><br><span class="line">$ npm install --save redux @tarojs/redux @tarojs/redux-h5 redux-thunk redux-logger</span><br></pre></td></tr></table></figure><p>然后引入异步编程依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add @tarojs/async-await</span><br><span class="line"># 或者使用 npm</span><br><span class="line">$ npm install --save @tarojs/async-await</span><br></pre></td></tr></table></figure><blockquote><p>我们可以阅读tarojs/async-await 的相关实现发现，<br>小程序环境和一般的web rn 环境的区别，在引入其他一些不兼容的库是可以参考</p></blockquote><p>然后在app.js第一行插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// src/app.js</span><br><span class="line">import &apos;@tarojs/async-await&apos;</span><br></pre></td></tr></table></figure><p>剩下的整合可以参考下面这个例子，这个例子实现了一个简单的仿知乎页面。相关代码在src<br>/dva.js内。</p><p>注意在发布时候最好关闭 redux-logger，避免性能问题！</p><blockquote><p>连接地址:<a href="https://github.com/zuoge85/taro-dva" target="_blank" rel="noopener">https://github.com/zuoge85/taro-dva</a></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> taro </tag>
            
            <tag> dva </tag>
            
            <tag> 小程序 </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native热更新 code-push入门。</title>
      <link href="/2017/10-23-codepush/"/>
      <url>/2017/10-23-codepush/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大约在react-native 0.19版本的的时候开始使用其开发app，转眼之间已经0.49了，今天简单讲下使用codepush热更新。</p><p>首先需要说明的是经过多方验证，使用codepush 更新并不违反苹果app store 相关协议，因此能正常审核。<br>但是需要注意在ios 不要有更新按钮和更新对话框。其他平台商店请查看官方文档。</p><p>附带2个本文不相关建议！</p><ol><li>轻易别更新rn0.49.x 由于打包机制的变化，一些库不兼容，需要等待社区适应或者修复bug</li><li><a href="https://github.com/wix/react-native-navigation" target="_blank" rel="noopener">https://github.com/wix/react-native-navigation</a> 会修改大量地方，特别是入口，造成一些不兼容，很多插件不能正常link，需要谨慎对待</li></ol><blockquote><p> code-push官方地址: <a href="https://github.com/Microsoft/code-push" target="_blank" rel="noopener">https://github.com/Microsoft/code-push</a></p></blockquote><blockquote><p> code-push文档翻译: <a href="https://github.com/Microsoft/code-push/blob/master/cli/README-cn.md" target="_blank" rel="noopener">https://github.com/Microsoft/code-push/blob/master/cli/README-cn.md</a></p></blockquote><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>1.安装react-native基础环境</p><p>2.第一步安装 </p><p><code>npm install -g code-push-cli</code></p><p>3.登录或者注册，输入下列命令</p><p><code>code-push register</code> 或者<code>code-push login</code></p><blockquote><p>都会打开浏览器完成注册或者登录，获取到一个token，然后在shell 输入token回车!</p></blockquote><blockquote><p>可以使用 <code>code-push whoami</code>查看登录状态</p></blockquote><blockquote><p>切换登录账户先使用<code>code-push logout</code>登出<br>其他相关详细命令请查看文档</p></blockquote><p>4.注册应用</p><p><code>code-push app add MyApp-ios ios react-native</code></p><p>需要注意的是，不同的平台需要注册不同的应用。</p><p>注册结束后会显示当前应用的一对 Deployment Key，请记录下来。Staging 用于测试，Production用于发布</p><blockquote><p><code>code-push app ls</code> 列出已经注册的应用</p></blockquote><blockquote><p><code>code-push app rm MyApp-ios</code> 删除刚刚注册的应用</p></blockquote><h2 id="集成插件"><a href="#集成插件" class="headerlink" title="集成插件"></a>集成插件</h2><p>环境准备好那么开始集成react-native-code-push插件</p><ol><li>安装插件</li></ol><p><code>npm install --save react-native-code-push</code></p><ol start="2"><li><p>link</p><p>执行 <code>react-native link react-native-code-push</code><br>link过程会提醒输入Deployment Key。</p></li></ol><blockquote><p>低于0.27使用<code>rnpm link react-native-code-push</code></p></blockquote><blockquote><p>js 代码更新的时候可以换掉  Deployment Key</p></blockquote><ol start="3"><li>由于一些原因不能自动link 需要手动的请查看下列连接。</li></ol><blockquote><p> [ios整合文档]<a href="https://github.com/Microsoft/react-native-code-push/blob/master/docs/setup-ios.md" target="_blank" rel="noopener">https://github.com/Microsoft/react-native-code-push/blob/master/docs/setup-ios.md</a></p></blockquote><blockquote><p> [android整合文档]<a href="https://github.com/Microsoft/react-native-code-push/blob/master/docs/setup-android.md" target="_blank" rel="noopener">https://github.com/Microsoft/react-native-code-push/blob/master/docs/setup-android.md</a> </p></blockquote><h2 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h2><ol><li>自动检查更新<br>app 入口加入下列代码</li></ol><p>下面代码的意思：当app恢复到前台后开始检查更新，如果是必选更新，那么立即更新；如果是可选更新，等下次恢复到前台立即安装更新！</p><figure class="highlight plain"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import codePush from &quot;react-native-code-push&quot;;</span><br><span class="line"></span><br><span class="line">let &#123;InstallMode,CheckFrequency&#125; =codePush;</span><br><span class="line">    </span><br><span class="line">let codePushOptions = &#123;</span><br><span class="line">  installMode: InstallMode.ON_NEXT_RESUME,//下次恢复到前台安装更新</span><br><span class="line">  mandatoryInstallMode: InstallMode.IMMEDIATE,//如果是必选更新，那么立即更新(会打断用户交互)</span><br><span class="line">  checkFrequency: CheckFrequency.ON_APP_RESUME,//检查更新的时机</span><br><span class="line">  deploymentKey: &apos;deploymentKey&apos;,//动态改变deploymentKey ，可以不设置，如果不设置使用原生代码内整合的key</span><br><span class="line">  updateDialog: null,//无对话框更新</span><br><span class="line">&#125;;</span><br><span class="line">AppRegistry.registerComponent(&apos;AppStarter&apos;, () =&gt; codePush(codePushOptions)(App));</span><br></pre></td></tr></table></figure><ol start="2"><li>手动更新</li></ol><p>在需要更新的地方整合下列代码，调用update 函数开始更新。</p><p>先使用checkForUpdate检查更新是因为sync 不一定会触发更新动作。</p><figure class="highlight plain"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import codePush from &quot;react-native-code-push&quot;;</span><br><span class="line">const &#123;SyncStatus&#125; = codePush;</span><br><span class="line">const SYNC_MSG_MAP = &#123;</span><br><span class="line">  [SyncStatus.UP_TO_DATE]: &quot;已经是最新了&quot;,</span><br><span class="line">  [SyncStatus.UPDATE_IGNORED]: &quot;已忽略&quot;,</span><br><span class="line">  [SyncStatus.UPDATE_INSTALLED]: &quot;安装成功&quot;,</span><br><span class="line">  [SyncStatus.UNKNOWN_ERROR]: &quot;未知的错误&quot;,</span><br><span class="line">  [SyncStatus.SYNC_IN_PROGRESS]: &quot;后台已经在更新&quot;,</span><br><span class="line">  [SyncStatus.CHECKING_FOR_UPDATE]: &quot;再整检查&quot;,</span><br><span class="line">  [SyncStatus.AWAITING_USER_ACTION]: &quot;等等用户选择&quot;,</span><br><span class="line">  [SyncStatus.DOWNLOADING_PACKAGE]: &quot;下载中&quot;,</span><br><span class="line">  [SyncStatus.INSTALLING_UPDATE]: &quot;安装中&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">const updateDialog=&#123;</span><br><span class="line">    descriptionPrefix: &quot;内容:&quot;,</span><br><span class="line">    mandatoryContinueButtonLabel: &quot;立即更新&quot;,</span><br><span class="line">    mandatoryUpdateMessage: &quot;必须更新&quot;,</span><br><span class="line">    optionalIgnoreButtonLabel: &quot;忽略&quot;,</span><br><span class="line">    optionalInstallButtonLabel: &quot;立即更新&quot;,</span><br><span class="line">    optionalUpdateMessage: &quot;一个更新是可用的。你想要安装它吗?&quot;,</span><br><span class="line">    title: &quot;检测到更新&quot;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function update() &#123;</span><br><span class="line">  const &#123;InstallMode, sync, checkForUpdate&#125; = codePush;</span><br><span class="line">  checkForUpdate().then((remotePackage) =&gt; &#123;</span><br><span class="line">    sync(&#123;</span><br><span class="line">      updateDialog,//更新对话框的文字配置</span><br><span class="line">      deploymentKey: &apos;deploymentKey&apos;,//动态改变deploymentKey ，可以不设置，如果不设置使用原生代码内整合的key</span><br><span class="line">      installMode: InstallMode.IMMEDIATE,//普通更新立即更新</span><br><span class="line">      mandatoryInstallMode: InstallMode.IMMEDIATE//必选更新立即更新</span><br><span class="line">    &#125;).then((state) =&gt; &#123;</span><br><span class="line">      alert(SYNC_MSG_MAP[state] || &quot;未知状态&quot;);//显示更新结果提示</span><br><span class="line">    &#125;).catch((e) =&gt; &#123;</span><br><span class="line">      console.log(e)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;).catch((e) =&gt; &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.获取更新信息和状态</p><figure class="highlight plain"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import codePush from &quot;react-native-code-push&quot;;</span><br><span class="line">function infoToString(info) &#123;</span><br><span class="line">  if(!info)&#123;</span><br><span class="line">    return &quot;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  let &#123;appVersion = &quot;&quot;, label = &quot;&quot;, description = &quot;&quot;&#125; = info;</span><br><span class="line">  return `ver:$&#123;appVersion&#125;,$&#123;label&#125;,$&#123;description&#125;`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function checkUpdate()&#123;</span><br><span class="line"> codePush.getUpdateMetadata(codePush.UpdateState.RUNNING)</span><br><span class="line">  .then((info) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      runningInfo: infoToString(info)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((e) =&gt; &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UpdateState枚举有3个值 </p><ol><li>RUNNING 当前运行的包信息</li><li>LATEST 服务器上最新的包信息</li><li>PENDING 准备更新的包状态，比如下载完成后在等等安装的更新</li></ol></blockquote><blockquote><p>完整JavaScript api 查看 <a href="https://github.com/Microsoft/react-native-code-push/blob/master/docs/api-js.md" target="_blank" rel="noopener">https://github.com/Microsoft/react-native-code-push/blob/master/docs/api-js.md</a></p></blockquote><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>整合好了就可以发布更新包，下面的</p><ol><li>发布包</li></ol><p><code>code-push release-react TestApp-ios ios -m --description &quot;修改bug，日常优化。&quot;</code></p><blockquote><p>-m 表示必须更新的包</p></blockquote><ol start="2"><li>查看安装率</li></ol><p><code>code-push deployment ls TestApp-ios</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>我一般会在app 里面整合一个隐藏的更新页面，比如通过点击某个地方10次， 跳转到更新界面查看更新信息和执行手动更新。</li><li>Deployment Key可以在js 内替换，可以考虑通过常量控制Deployment Key发布不同的版本</li><li>通过合理使用redux 管理状态，即便是立即更新打断用户也不会对用户输入造成较大影响，但是依然建议谨慎使用立即更新</li><li>在调试模式下也能测试更新</li></ol>]]></content>
      
      
        <tags>
            
            <tag> code-push </tag>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenMajiang 麻将之服务端起步</title>
      <link href="/2017/09-06-majiang-0/"/>
      <url>/2017/09-06-majiang-0/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在5个月前我开源了一套h5麻将程序，结果群小伙伴热情不减，因此我准备来一个系列麻将开发blog，这是第一篇！</p><p>现在把项目名称修改成OpenMajiang,我将提供一些持续更新！</p><p>下面相关内容包含本人的开发实践，其他人不一定适用！</p><h2 id="准备软件"><a href="#准备软件" class="headerlink" title="准备软件"></a>准备软件</h2><ol><li>开发工具IntelliJ IDEA</li><li>jdk1.8 并配置环境变量</li><li>maven 并配置环境变量</li><li>mysql 准备就绪</li></ol><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><ol><li>使用 shell <code>git clone https://github.com/zuoge85/OpenMajiang.git</code> 或者使用idea clone，</li><li>使用idea 打开 majiang 文件夹（File&gt;Open）</li></ol><blockquote><p>注意不是导入，因为前后端一起开发在一个窗口里面更方便一些</p></blockquote><h2 id="项目文件夹结构"><a href="#项目文件夹结构" class="headerlink" title="项目文件夹结构"></a>项目文件夹结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── majiang</span><br><span class="line">├── client  #这次不讲客户端</span><br><span class="line">└── server  #服务器</span><br><span class="line">|   ├── doc       #文档</span><br><span class="line">|   ├── manager   #半成品管理后台</span><br><span class="line">|   ├── maven     #一些maven依赖</span><br><span class="line">|   ├── project   #项目工程文件夹</span><br><span class="line">|   |   ├── distribution   #maven打包项目</span><br><span class="line">|   |   ├── mj-boss        #boss服务器</span><br><span class="line">|   |   ├── mj-client      #h5外壳，负责接入登录或者微信等</span><br><span class="line">|   |   ├── mj-core        #慕课公用依赖</span><br><span class="line">|   |   ├── mj-dao         #jdbckit工具生产的数据操作类</span><br><span class="line">|   |   ├── mj-data        #msg 工具生成的消息文件和Handler接口</span><br><span class="line">|   |   ├── mj-gateway     #网关模块</span><br><span class="line">|   |   ├── mj-manager     #管理后台外壳和api！</span><br><span class="line">|   |   └── mj-scene       #场景模块</span><br><span class="line">|   └── sql       #初始化sql</span><br></pre></td></tr></table></figure><h2 id="导入项目模块"><a href="#导入项目模块" class="headerlink" title="导入项目模块"></a>导入项目模块</h2><ol><li>拖动project文件下面的pom到idea maven 面板</li><li>或者右键单击pom 文件选择Add as Maven Project</li><li>设置jdk版本 File&gt;Project Structure&gt;Project Setting&gt;Project SDK 选择jdk8</li><li>设置语言级别 File&gt;Project Structure&gt;Project Setting&gt;Project language level 选择jdk8</li><li>需要检查 Preferences对话框搜索 java compiler 检查字节码版本是否1.8 </li></ol><h2 id="缺少的maven-依赖"><a href="#缺少的maven-依赖" class="headerlink" title="缺少的maven 依赖"></a>缺少的maven 依赖</h2><p>执行maven目录下的 install.sh导入依赖,相关依赖未发布到中心库</p><blockquote><p>lib依赖库地址 <a href="https://github.com/zuoge85/game-lib" target="_blank" rel="noopener">https://github.com/zuoge85/game-lib</a></p><p>外壳部分依赖地址 <a href="https://github.com/forkjoinorg/base/tree/2.0.1" target="_blank" rel="noopener">https://github.com/forkjoinorg/base/tree/2.0.1</a></p></blockquote><h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><ol><li>创建一个叫boss 的数据库，并且使用sql 文件夹下面的sql创建表结构</li><li>修改配置 majiang/server/project/mj-boss/src/main/resources/BossConfig.xml 里面的jdbc 部分</li></ol><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><ul><li>记住启动服务器没有先后顺序</li></ul><ol><li>启动game.boss.GameMain</li><li>启动game.gateway.GatewayMain</li><li>启动game.scene.SceneMain</li></ol><ul><li>启动h5外壳</li></ul><ol start="4"><li>启动majiang.client.ClientMain</li></ol><p>访问 <a href="http://127.0.0.1:8080/" target="_blank" rel="noopener">http://127.0.0.1:8080/</a> 开始游戏吧！</p><blockquote><p>下期预告 客户端入门！</p></blockquote><p>请关注我的公众号</p><p>开发QQ群 173103450</p><p><img src="/images/wxqrcode.jpg" alt="小草的泡码笔记"></p>]]></content>
      
      
        <tags>
            
            <tag> majiang </tag>
            
            <tag> 麻将 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决SPA微信分享失效问题?!</title>
      <link href="/2017/08-25-WeixinShare/"/>
      <url>/2017/08-25-WeixinShare/</url>
      <content type="html"><![CDATA[<p>古有ie6，今有微信browser，都是前段的梦魇。<br>自从上次解决微信spa(单页面应用)分享问题已经一年去了，最近又一次遇到问题。经过仔细分析先吧解决办法记录下来。</p><p>根据之前的经验对微信分享相关诡异情况进行一次总结！</p><h2 id="IOS直接访问域名，跳转子页面不能分享的问题！！"><a href="#IOS直接访问域名，跳转子页面不能分享的问题！！" class="headerlink" title="IOS直接访问域名，跳转子页面不能分享的问题！！"></a>IOS直接访问域名，跳转子页面不能分享的问题！！</h2><p>在ios内通过<a href="http://www.abc.com" target="_blank" rel="noopener">http://www.abc.com</a> 进入后跳转页面可能出现的分享失效问题！注意不带最后的”/“。<br>我们可以在代码内进行一次跳转来解决这个问题，注意WKWebview和UIWebview处理方式稍微不一样。</p><blockquote><p>在spa应用框架未初始化的时候调用！</p></blockquote><figure class="highlight plain"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if (this.isIos() &amp;&amp; location.pathname == &quot;/&quot;) &#123;</span><br><span class="line">  let baseUrl = &quot;/account&quot; + (location.search ? location.search : &quot;&quot;);</span><br><span class="line">  //</span><br><span class="line">  if(window[&quot;__wxjs_is_wkwebview&quot;])&#123;</span><br><span class="line">    history.replaceState(null, null, baseUrl);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    location.replace(baseUrl);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//注意排除 微信web开发者工具</span><br><span class="line">let isIos = ()=&gt;&#123;</span><br><span class="line">    return /(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent) &amp;&amp; </span><br><span class="line">        !(navigator.userAgent.indexOf(&quot;wechatdevtools&quot;) &gt; -1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端签名"><a href="#客户端签名" class="headerlink" title="客户端签名"></a>客户端签名</h2><p>每次跳转都 需要去服务器请签名，所以如果不考虑安全可以在客户端签名</p><figure class="highlight plain"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import uuidV4 from &quot;uuid/v4&quot;;</span><br><span class="line">import jsSHA from &quot;jssha/src/sha1&quot;;</span><br><span class="line"></span><br><span class="line">let nonceStr = uuidV4();</span><br><span class="line">let timestamp = Math.ceil(new Date().getTime() / 1000);</span><br><span class="line">let str1 = &quot;jsapi_ticket=&quot; + tokenModel.jsToken</span><br><span class="line">  + &quot;&amp;noncestr=&quot; + nonceStr + &quot;&amp;timestamp=&quot;</span><br><span class="line">  + timestamp + &quot;&amp;url=&quot; + url;</span><br><span class="line">let shaObj = new jsSHA(&quot;SHA-1&quot;, &quot;TEXT&quot;);</span><br><span class="line">shaObj.update(str1);</span><br><span class="line">let signature = shaObj.getHash(&quot;HEX&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>微信文档有如下说明，但是我认为一般没问题<br>“3.出于安全考虑，开发者必须在服务器端实现签名的逻辑。”</p></blockquote><h2 id="安卓和ios不同的签名过程"><a href="#安卓和ios不同的签名过程" class="headerlink" title="安卓和ios不同的签名过程"></a>安卓和ios不同的签名过程</h2><p>经过反复尝试ios 和 安卓 的签名过程如下</p><p>ios: 首次进入的location(在处理了不带路径问题后获取的location)，且判定是否已经签名过，如果没签名过就签名，已经签名的url不用签名！<br>安卓: 每次都使用 当前location.href.split(‘#’)[0] 签名</p><blockquote><p>注意最好在popstate 事件 内触发签名</p></blockquote><figure class="highlight plain"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;popstate&apos;, (event) =&gt; &#123;</span><br><span class="line">  setTimeout(()=&gt;&#123;</span><br><span class="line">    //签名</span><br><span class="line">  &#125;,0)</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure><h2 id="菜单无辜消失的问题"><a href="#菜单无辜消失的问题" class="headerlink" title="菜单无辜消失的问题"></a>菜单无辜消失的问题</h2><p>这个问题很没有规律，但是安卓下非常容易出现，解决办法，在签名成功后立即执行一次显示全部菜单</p><figure class="highlight plain"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wx.showAllNonBaseMenuItem();</span><br></pre></td></tr></table></figure><h3 id="完整签名代码示例"><a href="#完整签名代码示例" class="headerlink" title="完整签名代码示例"></a>完整签名代码示例</h3><figure class="highlight plain"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">const shareMap = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">let share =  &#123;</span><br><span class="line">  title: &apos;标题&apos;, // 分享标题</span><br><span class="line">  desc: &apos;描述！&apos;, // 分享描述</span><br><span class="line">  link: location.href.split(&apos;#&apos;)[0], // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span><br><span class="line">  imgUrl: location.origin + &apos;/lips_share.jpg&apos;, // 分享图标</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//popstate后调用</span><br><span class="line">const innerInitWeixinConfig = () =&gt; &#123;</span><br><span class="line">  let tokenModel = &#123;&#125;//启动的时候获取的签名需要信息;</span><br><span class="line">  if (!wx || !tokenModel) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  let url = this.isIos() ? this._location : location.href.split(&apos;#&apos;)[0];</span><br><span class="line"></span><br><span class="line">  let nonceStr = uuidV4();</span><br><span class="line">  let timestamp = Math.ceil(new Date().getTime() / 1000);</span><br><span class="line">  let str1 = &quot;jsapi_ticket=&quot; + tokenModel.jsToken</span><br><span class="line">    + &quot;&amp;noncestr=&quot; + nonceStr + &quot;&amp;timestamp=&quot;</span><br><span class="line">    + timestamp + &quot;&amp;url=&quot; + url;</span><br><span class="line"></span><br><span class="line">  console.log(&quot;签名串&quot;, str1);</span><br><span class="line"></span><br><span class="line">  let shaObj = new jsSHA(&quot;SHA-1&quot;, &quot;TEXT&quot;);</span><br><span class="line">  shaObj.update(str1);</span><br><span class="line">  let signature = shaObj.getHash(&quot;HEX&quot;);</span><br><span class="line"></span><br><span class="line">  if (!this.isIos() || (!shareMap[url])) &#123;</span><br><span class="line">    shareMap[url] = url;</span><br><span class="line">    wx.config(&#123;</span><br><span class="line">      debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span><br><span class="line">      appId: tokenModel.appid, // 必填，公众号的唯一标识</span><br><span class="line">      timestamp, // 必填，生成签名的时间戳</span><br><span class="line">      nonceStr, // 必填，生成签名的随机串</span><br><span class="line">      signature,// 必填，签名，见附录1</span><br><span class="line">      jsApiList: [</span><br><span class="line">        &apos;onMenuShareTimeline&apos;,</span><br><span class="line">        &apos;onMenuShareAppMessage&apos;,</span><br><span class="line">        &apos;onMenuShareQQ&apos;,</span><br><span class="line">        &apos;onMenuShareWeibo&apos;,</span><br><span class="line">        &apos;onMenuShareQZone&apos;,</span><br><span class="line">        &apos;startRecord&apos;,</span><br><span class="line">        &apos;stopRecord&apos;,</span><br><span class="line">        &apos;onVoiceRecordEnd&apos;,</span><br><span class="line">        &apos;playVoice&apos;,</span><br><span class="line">        &apos;pauseVoice&apos;,</span><br><span class="line">        &apos;stopVoice&apos;,</span><br><span class="line">        &apos;onVoicePlayEnd&apos;,</span><br><span class="line">        &apos;uploadVoice&apos;,</span><br><span class="line">        &apos;downloadVoice&apos;,</span><br><span class="line">        &apos;chooseImage&apos;,</span><br><span class="line">        &apos;previewImage&apos;,</span><br><span class="line">        &apos;uploadImage&apos;,</span><br><span class="line">        &apos;downloadImage&apos;,</span><br><span class="line">        &apos;translateVoice&apos;,</span><br><span class="line">        &apos;getNetworkType&apos;,</span><br><span class="line">        &apos;openLocation&apos;,</span><br><span class="line">        &apos;getLocation&apos;,</span><br><span class="line">        &apos;hideOptionMenu&apos;,</span><br><span class="line">        &apos;showOptionMenu&apos;,</span><br><span class="line">        &apos;hideMenuItems&apos;,</span><br><span class="line">        &apos;showMenuItems&apos;,</span><br><span class="line">        &apos;hideAllNonBaseMenuItem&apos;,</span><br><span class="line">        &apos;showAllNonBaseMenuItem&apos;,</span><br><span class="line">        &apos;closeWindow&apos;,</span><br><span class="line">        &apos;scanQRCode&apos;,</span><br><span class="line">        &apos;chooseWXPay&apos;,</span><br><span class="line">        &apos;openProductSpecificView&apos;,</span><br><span class="line">        &apos;addCard&apos;,</span><br><span class="line">        &apos;chooseCard&apos;,</span><br><span class="line">        &apos;openCard&apos;</span><br><span class="line">      ] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    wx.ready(() =&gt; &#123;</span><br><span class="line">      console.log(&quot;微信jssdk 初始化正确&quot;, share);</span><br><span class="line">      nativeShare();</span><br><span class="line">    &#125;);</span><br><span class="line">    wx.error(function (res) &#123;</span><br><span class="line">      console.log(&quot;微信jssdk 初始化失败&quot;, res);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    nativeShare();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const nativeShare = () =&gt; &#123;</span><br><span class="line">  if (share) &#123;</span><br><span class="line">    wx.onMenuShareTimeline(this.share);</span><br><span class="line">    wx.onMenuShareAppMessage(this.share);</span><br><span class="line">    wx.onMenuShareQQ(this.share);</span><br><span class="line">    wx.onMenuShareWeibo(this.share);</span><br><span class="line">    wx.onMenuShareQZone(this.share);</span><br><span class="line">  &#125;</span><br><span class="line">  wx.showAllNonBaseMenuItem();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>微信官方有下面这段不明觉厉的说明！</li></ol><blockquote><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用（同一个url仅需调用一次，对于变化url的SPA的web<br>app可在每次url变化时进行调用,目前Android微信客户端不支持pushState的H5新特性，所以使用pushState来实现web<br>app的页面会导致签名失败，此问题会在Android6.2中修复）。</p></blockquote><blockquote><p>参考地址: <a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115</a></p></blockquote><ol start="2"><li>vue-router 项目的讨论 <a href="https://github.com/vuejs/vue-router/issues/481" target="_blank" rel="noopener">https://github.com/vuejs/vue-router/issues/481</a></li></ol>]]></content>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> SPA </tag>
            
            <tag> react-router </tag>
            
            <tag> History </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云 CodePipeline 持续集成之发布静态网站到OSS</title>
      <link href="/2017/08-21-CodePipeline-ossweb/"/>
      <url>/2017/08-21-CodePipeline-ossweb/</url>
      <content type="html"><![CDATA[<p>现在流行前后端彻底分离，前端生成webpack 打包的静态文件。可以通过 CodePipeline构建后发布到oss 进行发布前端。下面进行详细讲解</p><h2 id="第一步-申请开通-CodePipeline"><a href="#第一步-申请开通-CodePipeline" class="headerlink" title="第一步 申请开通 CodePipeline"></a>第一步 申请开通 CodePipeline</h2><blockquote><p> <a href="https://www.aliyun.com/product/codepipeline" target="_blank" rel="noopener">CodePipeline 地址</a> </p></blockquote><h2 id="第二步-创建CodePipeline任务"><a href="#第二步-创建CodePipeline任务" class="headerlink" title="第二步 创建CodePipeline任务"></a>第二步 创建CodePipeline任务</h2><h3 id="1-创建一个nodejs任务"><a href="#1-创建一个nodejs任务" class="headerlink" title="1. 创建一个nodejs任务"></a>1. 创建一个nodejs任务</h3><p><img src="img/new-project.png" alt="创建一个nodejs任务"></p><h3 id="2-详细设置"><a href="#2-详细设置" class="headerlink" title="2. 详细设置"></a>2. 详细设置</h3><p>如下图，配置好git仓库和账号，以及分支</p><p><img src="img/repository-config.png" alt="代码仓库配置"></p><p>配置项目构建命令，比如我的项目修改成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br><span class="line">npm run deploy:<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="img/bulid-config.png" alt="代码仓库配置"></p><h3 id="3-部署方式-选择不需要部署"><a href="#3-部署方式-选择不需要部署" class="headerlink" title="3. 部署方式 选择不需要部署"></a>3. 部署方式 选择不需要部署</h3><p><img src="img/deploy-config.png" alt="部署方式"></p><h2 id="第三步-准备oss"><a href="#第三步-准备oss" class="headerlink" title="第三步 准备oss"></a>第三步 准备oss</h2><h3 id="1-新建-Bucket-选择标准存储，权限配置成公共读"><a href="#1-新建-Bucket-选择标准存储，权限配置成公共读" class="headerlink" title="1. 新建 Bucket 选择标准存储，权限配置成公共读"></a>1. 新建 Bucket 选择标准存储，权限配置成公共读</h3><blockquote><p>下面测试都默认 bucket 名字为 test-weiapp-web</p></blockquote><h3 id="2-配置访问控制-RAM"><a href="#2-配置访问控制-RAM" class="headerlink" title="2. 配置访问控制 RAM"></a>2. 配置访问控制 RAM</h3><p>配置ram账号权限给构建使用，一定要配置好ram 权限。理由如下</p><ul><li>防止误删除了其他 bucket 的文件等</li><li>ossutil 工具太危险！！！</li><li>安全</li></ul><h3 id="3-创建策略"><a href="#3-创建策略" class="headerlink" title="3. 创建策略"></a>3. 创建策略</h3><p>在访问控制界面选择 &gt; 策略管理 &gt; 新建授权策略 &gt; 选择空白模板 &gt; 输入策略 &gt; 创建成果</p><p>策略配置参考如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Statement"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Action"</span>: [</span><br><span class="line">        <span class="string">"oss:GetBucketAcl"</span>,</span><br><span class="line">        <span class="string">"oss:GetObject"</span>,</span><br><span class="line">        <span class="string">"oss:PutObject"</span>,</span><br><span class="line">        <span class="string">"oss:DeleteObject"</span>,</span><br><span class="line">        <span class="string">"oss:AbortMultipartUpload"</span>,</span><br><span class="line">        <span class="string">"oss:ListObjects"</span>,</span><br><span class="line">        <span class="string">"oss:ListParts"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"Resource"</span>: [</span><br><span class="line">        <span class="string">"acs:oss:oss-cn-beijing:*:test-weiapp-web"</span>,</span><br><span class="line">        <span class="string">"acs:oss:oss-cn-beijing:*:test-weiapp-web/*"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"Effect"</span>: <span class="string">"Allow"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"Version"</span>: <span class="string">"1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Resource的详细格式是 <code>acs:oss:{region}:{bucket_owner}:{bucket_name}/{object_name}</code></p><p>注意: bucket_name 是oss-cn-beijing,而且不是cn-beijing</p></blockquote><p><a href="https://help.aliyun.com/document_detail/31867.html?spm=5176.doc43394.6.577.oRBSZH" title="访问控制" target="_blank" rel="noopener">访问控制参考</a><br><a href="http://gosspublic.alicdn.com/ram-policy-editor/index.html?spm=5176.doc31929.2.6.oqL7oA" title="策略图像界面" target="_blank" rel="noopener">授权策略的图形界面生成器</a> </p><h3 id="4-创建子账号并授权"><a href="#4-创建子账号并授权" class="headerlink" title="4. 创建子账号并授权"></a>4. 创建子账号并授权</h3><p>在访问控制界面选择 &gt; 用户管理 &gt; 新建用户 &gt; 输入用户名 &gt; 勾选生成AccessKey &gt; 确定 &gt; 下载Ak 配置文件</p><p>在访问控制界面选择 &gt; 用户管理 &gt; 找到刚刚创建的用户 &gt; 点击授权 &gt; 找到上面创建的授权策略 &gt; 添加 &gt; 确定</p><h2 id="第四步-修改项目"><a href="#第四步-修改项目" class="headerlink" title="第四步 修改项目"></a>第四步 修改项目</h2><p>修改下面shell 内的 OSS_KEY_ID、OSS_KEY_SECRET、OSS_END_POINT和OSS_DISTPATH<br>并加入到自己项目的合适位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">SYS_OS=`uname -s`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$SYS_OS</span> = <span class="string">"Darwin"</span> ];<span class="keyword">then</span></span><br><span class="line">  OSS_UTIL_URL=<span class="string">'http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/50452/cn_zh/1502070362563/ossutilmac64?spm=5176.doc50452.2.6.wSvGp7'</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$SYS_OS</span> = <span class="string">"Linux"</span> ];<span class="keyword">then</span></span><br><span class="line">OSS_UTIL_URL=<span class="string">'http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/50452/cn_zh/1502070288777/ossutil64?spm=5176.doc50452.2.3.wSvGp7'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">OSS_KEY_ID=<span class="string">'312312fdsfds'</span> <span class="comment">#--access-key-id</span></span><br><span class="line">OSS_KEY_SECRET=<span class="string">'sfsdfsdf3123dsfdf'</span> <span class="comment">#--access-key-secret</span></span><br><span class="line">OSS_END_POINT=<span class="string">'oss-cn-beijing.aliyuncs.com'</span> <span class="comment">#endpoint</span></span><br><span class="line">OSS_BUCKETINT=<span class="string">'test-weiapp-web'</span> <span class="comment">#Bucket</span></span><br><span class="line">OSS_DISTPATH=<span class="string">'publish/www'</span> <span class="comment">#相对于脚本位置的静态网页路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'开始下载ossutil命令行工具'</span></span><br><span class="line">curl -o ossutil <span class="variable">$&#123;OSS_UTIL_URL&#125;</span></span><br><span class="line">chmod +x ossutil</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'配置AK'</span></span><br><span class="line">./ossutil config -e <span class="variable">$&#123;OSS_END_POINT&#125;</span> -i <span class="variable">$&#123;OSS_KEY_ID&#125;</span> -k <span class="variable">$&#123;OSS_KEY_SECRET&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'删除之前的文件！避免文件版本冲突等问题'</span></span><br><span class="line">./ossutil rm oss://<span class="variable">$&#123;OSS_BUCKETINT&#125;</span> -r -f</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'上传文件'</span></span><br><span class="line">ls -al ../</span><br><span class="line">./ossutil cp -r -f <span class="variable">$&#123;OSS_DISTPATH&#125;</span> oss://<span class="variable">$&#123;OSS_BUCKETINT&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>删除文件部分的shell 可以不要，具体请参考自己项目的结构。<br>因为我的项目生成大量hash文件名的文件，如果不删除，oss 内无用文件将会越来越多。<br>但是这样的删除过程会增加部署时间，且在一定时间内网站不可以访问;<br>所以我建议修改项目结构，加入版本，把这些变化文件加入到一个带版本号的子文件夹，这样每次只删除第n个版本前的文件。</p></blockquote><h2 id="第五步修改-CodePipeline配置"><a href="#第五步修改-CodePipeline配置" class="headerlink" title="第五步修改 CodePipeline配置"></a>第五步修改 CodePipeline配置</h2><ol><li>如果不需要测试可以删除测试部分</li><li>添加构建步骤”执行shell”</li><li>点击立即执行开始一次构建</li></ol><p>添加执行第四部的sh，注意相对路径是项目根路径，在我的项目内是 <code>publish/upload.sh</code></p><h2 id="第六步-修改oss-配置"><a href="#第六步-修改oss-配置" class="headerlink" title="第六步 修改oss 配置"></a>第六步 修改oss 配置</h2><p>对象存储 &gt; 域名管理 &gt; 绑定用于域名 &gt; 输入域名 &gt; 开启cdn -&gt;自动添加cname</p><blockquote><p>如果域名不在当前阿里云账号下或者不在阿里云，那么亲手动添加 cname。</p><p>点击确定后多等几分钟。开启cdn 扥过程比较慢。<br>需要提前打开cdn功能</p></blockquote><p>当域名添加完毕后</p><p>对象存储 &gt; 域名管理 &gt; 找到刚刚添加的域名 &gt; 开启CDN 缓存自动刷新</p><h2 id="第七步-router-导航的问题"><a href="#第七步-router-导航的问题" class="headerlink" title="第七步 router 导航的问题"></a>第七步 router 导航的问题</h2><p>如果项目使用react-router 利用history api 进行导航，那么怎么解决导航的问题？</p><h3 id="1-修改oss-利用404页面"><a href="#1-修改oss-利用404页面" class="headerlink" title="1. 修改oss 利用404页面"></a>1. 修改oss 利用404页面</h3><p>对象存储 &gt; 基础设置 &gt; 静态页面 &gt; 默认首页和默认 404 页都修改成 index.html</p><blockquote><p>但是这种办法有一个问题，除了首页外的其他页面请求的状态码都是 404。<br>在某些网络情况下404 会被劫持！所以这个办法实际上不完美！</p></blockquote><h3 id="2-利用-镜像回源"><a href="#2-利用-镜像回源" class="headerlink" title="2. 利用 镜像回源"></a>2. 利用 镜像回源</h3><p>利用”镜像回源”把请求重新定向回首页</p><p>对象存储 &gt; 基础设置 &gt; 镜像回源 &gt; 创建规则 &gt; 重定向</p><p><img src="img/huiyuan-config.png" alt="创建一个nodejs任务"></p><h1 id="第八部-cdn-配置"><a href="#第八部-cdn-配置" class="headerlink" title="第八部 cdn 配置"></a>第八部 cdn 配置</h1><p>CDN &gt; 域名管理 &gt; 找到刚刚添加的域名 &gt; 性能优化 &gt; 开启智能压缩</p>]]></content>
      
      
        <tags>
            
            <tag> CodePipeline </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 持续集成 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>新开始</title>
      <link href="/2017/08-20-hello-world/"/>
      <url>/2017/08-20-hello-world/</url>
      <content type="html"><![CDATA[<p>一直说写blog，大概过了1年了，依然没开工，必须克服困难呀，哈哈</p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="/404.html"/>
      <url>/404.html</url>
      <content type="html"><![CDATA[<!DOCTYPE HTML><html><head>    <meta http-equiv="content-type" content="text/html;charset=utf-8;">    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">    <meta name="robots" content="all">    <meta name="robots" content="index,follow">    <link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"></head><body><script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="回到我的主页"></script><script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script><script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"></script></body></html>]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index-1.html"/>
      <url>/categories/index-1.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
